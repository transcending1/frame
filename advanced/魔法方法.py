class Company(object):
    '''
    公司信息
    '''

    ######################## 获取类的基础属性 ##################
    # 1. __doc__:获取到对象的注释信息
    '''应用场景:1.自动化生成前端API文档的时候会调用这个方法,可以让文档和Python的注释结合,达到节省代码的效果
                2.可以使用python内置的help方法来查看对应的内容
        '''
    # 2. __name__:获取对象的名称信息
    '''应用场景:1.生成字符串来完成类或者函数的自定义操作'''
    # 3.__file__: 获取到当前文件路径
    '''应用场景:1.入口文件的地方可以获取执行路径:Django setting中的BASE_DIR+os操作可以轻松获取项目的路径'''

    ######################## 获取类的基础属性 ##################

    ######################## 实例化相关 ########################
    _instance = None

    def __new__(cls, *args, **kwargs):
        '''实例化对象的时候优先执行,决定实例化之后生成什么对象'''
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, employee_list):
        '''实例化对象的时候做的操作'''
        '''内部可以维护一系列的数据类型,隐式的结构,内置的魔法函数可以让对象的使用变得非常灵活'''
        self.employee = employee_list

    ######################## 实例化相关 ########################

    ######################### 字符串相关 #########################
    def __str__(self):
        '''方便外部用户查看的字符串 注意:仅仅返回字符串,用来解释对象的内容'''
        '''外部调用方式:print(obj)  或者str(obj)都可以得到对应的内容'''
        '''应用场景:1.Django 的 admin站点中的显示对象的信息的时候可以使用
                    2.用友好的方式来描述一个对象的时候可以使用,这样打印出来的内容更加人性化,更加方便调试阅读,
                        省去了很多重复没用的操作
        '''
        return str(self.employee)

    def __repr__(self):
        '''此类方法的输入仅仅对python友好,对用户不友好'''
        '''外部调用方式:'''
        return self.employee

    ######################### 字符串相关 #########################

    ######################### 取值相关 ###########################
    def __getitem__(self, item):
        '''顾名思义：通过某种形式获取对象中的哪些属性'''
        '''1.在用 for..in.. 迭代对象时，如果对象没有实现 __iter__ __next__ 迭代器协议，
        Python的解释器就会去寻找__getitem__ 来迭代对象，如果连__getitem__ 都没有定义，
        这解释器就会报对象不是迭代器的错误：'''
        '''2.如果外部采用切片的方式获取内部的值：company[:2] item为一个slice对象（start，end，step）'''
        '''3.如果外部采用字典的方式获取内部的值: company['sb'] item为一个字符串，可以通过字典的方式获取内部的信息 '''
        '''4.各种各样的类型传递进来即可捕获到,只要是python []获取内容支持的方式即可    company["sb","sdf"] item为一个元祖，可以操作元祖来获取对应的值 '''
        '''应用场景：ORM中querryset对象的分页操作'''
        return self.employee[item]

    def __setitem__(self, key, value):
        '''和getitem一致,可以通过某种形式给对象赋值'''
        '''应用场景:1.Django中的cookie,session的赋值操作用到
                    2.pandas中的Dataframe结构使用到对应的内容
        '''
        self.employee.append((key, value))

    def __delitem__(self, key):
        '''通过key删除内容'''
        '''应用场景:1.通过del xxx的方式可以进行对象层面的删除操作,对数据库进行逻辑删除的时候可以考虑使用这种方式进行'''
        self.employee.remove(key)

    ######################### 取值相关 ###########################

    def __len__(self):
        '''用来描述一个对象的大小,对一个有大小的对象来说,使用这种方式更加优雅'''
        '''通过外部的len()方法来调用'''
        '''应用场景:querryset对象搜索出来的数据库记录的总数是多少'''
        return len(self.employee)

    ######################### 数学运算相关 ##########################
    '''内部包含了丰富的数学运算相关的内容:1.一元运算符 2.二元运算符 3.算术运算符 求余等等内容,如果有相关运算需求可以考虑使用对应的内容来简化操作'''

    def __neg__(self):
        '''负号触发对应的内容 -obj'''
        return 1

    def __pos__(self):
        '''正号触发对应的内容 +obj'''
        return 2

    def __abs__(self):
        '''绝对值触发对应的内容 abs(obj)'''
        return 3

    def __add__(self, other):
        '''加法运算:通过两个变量的属性来控制 obj1 + obj2 后返回的内容'''
        return self.employee + other.employee
    ######################### 数学运算相关 ##########################


